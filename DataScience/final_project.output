
R version 3.2.5 (2016-04-14) -- "Very, Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> ########################
> # Requirements
> ########################
> 
> # use mongolite
> # Debian: libssl-dev, libsasl2-dev
> if(!require(mongolite)) install.packages("mongolite")
Loading required package: mongolite
> library(mongolite)
> # library(stringr)
> 
> # other library
> library(e1071)
> library(party)
Loading required package: grid
Loading required package: mvtnorm
Loading required package: modeltools
Loading required package: stats4
Loading required package: strucchange
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: sandwich
> if(!require(caret)) install.packages("caret")
Loading required package: caret
Loading required package: lattice
Loading required package: ggplot2
> library(caret)
> if(!require(partykit)) install.packages("partykit")
Loading required package: partykit

Attaching package: ‘partykit’

The following objects are masked from ‘package:party’:

    cforest, ctree, ctree_control, edge_simple, mob, mob_control,
    node_barplot, node_bivplot, node_boxplot, node_inner, node_surv,
    node_terminal

> library(partykit)
> 
> ########################
> # Data Preparation
> ########################
> 
> # Connection configuration
> MONGO_URL = "mongodb://group9:HAFYergq@141.5.113.177:27017/smartshark_test"
> # MONGOURL = "mongodb://group9:HAFYergq@141.5.113.177:27017/smartshark_test"
> # MONGO_URL = "mongodb://localhost:27017/smartshark_test"
> 
> # Load data of the activities related to people
> issue=mongo(collection="issue",url=MONGO_URL)$find()
 Found 1000 records... Found 2000 records... Found 2720 records... Imported 2720 records. Simplifying into dataframe...
> issue_comment=mongo(collection="issue_comment",url=MONGO_URL)$find()
 Found 1000 records... Found 2000 records... Found 3000 records... Found 4000 records... Found 5000 records... Found 6000 records... Found 7000 records... Found 8000 records... Found 9000 records... Found 10000 records... Found 11000 records... Found 12000 records... Found 13000 records... Found 14000 records... Found 15000 records... Found 16000 records... Found 17000 records... Found 18000 records... Found 19000 records... Found 20000 records... Found 21000 records... Found 22000 records... Found 23000 records... Found 24000 records... Found 25000 records... Found 26000 records... Found 27000 records... Found 27143 records... Imported 27143 records. Simplifying into dataframe...
> message=mongo(collection="message",url=MONGO_URL)$find()
 Found 1000 records... Found 2000 records... Found 3000 records... Found 4000 records... Found 5000 records... Found 6000 records... Found 7000 records... Found 8000 records... Found 9000 records... Found 10000 records... Found 11000 records... Found 12000 records... Found 13000 records... Found 14000 records... Found 15000 records... Found 16000 records... Found 17000 records... Found 18000 records... Found 19000 records... Found 20000 records... Found 21000 records... Found 22000 records... Found 23000 records... Found 24000 records... Found 25000 records... Found 26000 records... Found 27000 records... Found 28000 records... Found 29000 records... Found 30000 records... Found 31000 records... Found 32000 records... Found 33000 records... Found 34000 records... Found 35000 records... Found 36000 records... Found 37000 records... Found 38000 records... Found 39000 records... Found 40000 records... Found 41000 records... Found 42000 records... Found 43000 records... Found 44000 records... Found 45000 records... Found 46000 records... Found 47000 records... Found 48000 records... Found 49000 records... Found 50000 records... Found 51000 records... Found 52000 records... Found 53000 records... Found 54000 records... Found 55000 records... Found 56000 records... Found 57000 records... Found 58000 records... Found 59000 records... Found 60000 records... Found 61000 records... Found 62000 records... Found 63000 records... Found 64000 records... Found 65000 records... Found 66000 records... Found 67000 records... Found 67337 records... Imported 67337 records. Simplifying into dataframe...
> event=mongo(collection="event",url=MONGO_URL)$find()
 Found 1000 records... Found 2000 records... Found 3000 records... Found 4000 records... Found 5000 records... Found 6000 records... Found 7000 records... Found 8000 records... Found 9000 records... Found 10000 records... Found 11000 records... Found 12000 records... Found 13000 records... Found 14000 records... Found 15000 records... Found 16000 records... Found 17000 records... Found 18000 records... Found 19000 records... Found 20000 records... Found 21000 records... Found 22000 records... Found 23000 records... Found 24000 records... Found 25000 records... Found 26000 records... Found 27000 records... Found 27034 records... Imported 27034 records. Simplifying into dataframe...
> con_commit=mongo(collection="commit", url=MONGO_URL)
> commit=con_commit$find()
 Found 1000 records... Found 2000 records... Found 2371 records... Imported 2371 records. Simplifying into dataframe...
> tag=mongo(collection="tag",url=MONGO_URL)$find()
 Found 71 records... Imported 71 records. Simplifying into dataframe...
> 
> # Collect all people_id from the related data above
> mcci=c()
> mtoi=c()
> for(x in unique(message$cc_ids)) {
+   for(y in unique(x)) {
+     mcci=c(mcci, toString(y))
+   }
+ }
> for(x in unique(message$to_ids)) {
+   for(y in unique(x)) {
+     mtoi=c(mtoi, toString(y))
+   }
+ }
> tmpid = c(issue$creator_id, issue$reporter_id, issue_comment$author_id,
+            message$from_id, mcci, mtoi,
+            event$author_id,
+            commit$author_id, commit$committer_id,
+            tag$tagger_id)
> people_id=unique(tmpid)
> # people_id=na.omit(people_id)
> people_id=people_id[!is.na(people_id)]
> 
> # Load data of people from csv exported from mongodb
> people_orig=read.csv("http://user.informatik.uni-goettingen.de/~chenfeng.zhu/data/people.csv")
> # str_replace_all(people_orig$X_id,"ObjectId((","")
> people_orig$X_id = gsub('[)]', '', gsub('ObjectId[(]', '', people_orig$X_id))
> 
> # classified by people's information (email, name, username)
> p_cat=cbind(people_orig, category=1)
> p_cat[,5]=1
> for(i in 1:nrow(p_cat)) {
+   if (grepl("[Dd]ev",paste(p_cat[i,2],p_cat[i,3],p_cat[i,4]))==TRUE) {
+     p_cat[i,5]=3
+   } else if (grepl("user",paste(p_cat[i,2],p_cat[i,3],p_cat[i,4]))==TRUE) {
+     p_cat[i,5]=2
+   }
+ }
> for(i in 1:nrow(p_cat)) {
+   # Exception
+   if (TRUE) {
+   } else if (grepl("edevil",p_cat[i,4])==TRUE) {
+     p_cat[i,5]=1
+   } else if (grepl("gnoremac",p_cat[i,4])==TRUE) {
+     p_cat[i,5]=1
+   } else if (grepl("devaraj",p_cat[i,4])==TRUE) {
+     p_cat[i,5]=1
+   } else if (grepl("devaki.vamsi",p_cat[i,4])==TRUE) {
+     p_cat[i,5]=1
+   } else if (grepl("devesh.srivastava",p_cat[i,4])==TRUE) {
+     p_cat[i,5]=1
+   } else if (grepl("devkonar",p_cat[i,4])==TRUE) {
+     p_cat[i,5]=1
+   } else if (grepl("mahadev",p_cat[i,4])==TRUE) {
+     p_cat[i,5]=1
+   } else if (grepl("Savithadi",p_cat[i,4])==TRUE) {
+     p_cat[i,5]=1
+   } else if (grepl("sudev.ac",p_cat[i,4])==TRUE) {
+     p_cat[i,5]=1
+   } else if (grepl("[Vv]aibhav.[Dd]evekar",p_cat[i,4])==TRUE) {
+     p_cat[i,5]=1
+   } else if (grepl("akvadrako",p_cat[i,4])==TRUE) {
+     p_cat[i,5]=1
+   }
+ }
> 
> 
> ########################
> # Data Collection
> ########################
> 
> # Base
> datatable=as.data.frame(people_id)
> 
> # commit relative
> commit_auth=data.frame(table(commit$author_id))
> colnames(commit_auth)=c("people_id","commit_auth_total")
> commit_commit=data.frame(table(commit$committer_id))
> colnames(commit_commit)=c("people_id","commit_commit_total")
> datatable=merge(datatable,commit_auth,by.x="people_id",by.y="people_id",all.x=TRUE)
> datatable=merge(datatable,commit_commit,by.x="people_id",by.y="people_id",all.x=TRUE)
> datatable[is.na(datatable)]=0
> 
> # issue relative
> issue_create=data.frame(table(issue$creator_id))
> colnames(issue_create)=c("people_id","issue_create_total")
> issue_report=data.frame(table(issue$reporter_id))
> colnames(issue_report)=c("people_id","issue_report_total")
> datatable=merge(datatable,issue_create,by.x="people_id",by.y="people_id",all.x=TRUE)
> datatable=merge(datatable,issue_report,by.x="people_id",by.y="people_id",all.x=TRUE)
> issue_comm=data.frame(table(issue_comment$author_id))
> colnames(issue_comm)=c("people_id","issue_comment_total")
> datatable=merge(datatable,issue_comm,by.x="people_id",by.y="people_id",all.x=TRUE)
> datatable[is.na(datatable)]=0
> 
> # event relative
> event_auth=data.frame(table(event$author_id))
> colnames(event_auth)=c("people_id","event_auth_total")
> datatable=merge(datatable,event_auth,by.x="people_id",by.y="people_id",all.x=TRUE)
> datatable[is.na(datatable)]=0
> 
> # tag relative
> tag_tag=data.frame(table(tag$tagger_id))
> colnames(tag_tag)=c("people_id","tag_tag_total")
> datatable=merge(datatable,tag_tag,by.x="people_id",by.y="people_id",all.x=TRUE)
> datatable[is.na(datatable)]=0
> 
> # email relative
> message_from=data.frame(table(message$from_id))
> colnames(message_from)=c("people_id","message_from_total")
> datatable=merge(datatable,message_from,by.x="people_id",by.y="people_id",all.x=TRUE)
> datatable[is.na(datatable)]=0
> 
> 
> ########################
> # Data Transformation
> ########################
> 
> # Merge information into matrix
> userdatatable=merge(datatable,p_cat,by.x="people_id",by.y="X_id",all.x=TRUE)
> userdatatable[is.na(userdatatable)]=0
> # userdatatable[2,]
> # whether considering other types of participants
> x=userdatatable
> for(i in 1:nrow(userdatatable)) {
+   if ((userdatatable[i,2]+userdatatable[i,3]+userdatatable[i,4]+userdatatable[i,5])!=0) {
+     # userdatatable[i,13]=4
+     # print(userdatatable[i,])
+   }
+ }
> x=userdatatable[userdatatable[,13]!="1",]
> for(i in 1:nrow(x)) {
+   if (x[i,13]=="4") {
+     x[i,13]="1"
+   }
+ }
> # x=userdatatable[userdatatable[,13]!=0,]
> 
> # Write into a csv file
> # write.csv(userdatatable, file="~/public_html/data/ds_dragon.csv")
> 
> 
> ########################
> # Data Analysis
> ########################
> 
> # Create training data
> #train=rbind(matrix(x$commit_auth_total,ncol = 7), matrix(x$commit_commit_total,ncol = 7), matrix(x$issue_create_total,ncol = 7), matrix(x$issue_report_total,ncol = 7), matrix(x$event_auth_total,ncol = 7), matrix(x$issue_comment_total,ncol = 7), matrix(x$message_from_total,ncol = 7))
> #train=rbind(matrix(x$issue_create_total,ncol = 3), matrix(x$issue_report_total,ncol = 3),matrix(x$commit_commit_total,ncol = 3))
> #train=rbind(matrix(x$issue_report_total,ncol = 2),matrix(x$issue_comment_total,ncol = 2))
> 
> ##############
> # 1. k-means
> #train=rbind(matrix(x$commit_auth_total,ncol = 7), matrix(x$commit_commit_total,ncol = 7), matrix(x$issue_create_total,ncol = 7), matrix(x$issue_report_total,ncol = 7), matrix(x$event_auth_total,ncol = 7), matrix(x$issue_comment_total,ncol = 7), matrix(x$message_from_total,ncol = 7))
> # 3
> x=userdatatable
> train=rbind(matrix(x$commit_auth_total,ncol = 7), matrix(x$commit_commit_total,ncol = 7), matrix(x$issue_create_total,ncol = 7), matrix(x$issue_report_total,ncol = 7), matrix(x$event_auth_total,ncol = 7), matrix(x$issue_comment_total,ncol = 7), matrix(x$message_from_total,ncol = 7))
Warning messages:
1: In matrix(x$commit_auth_total, ncol = 7) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [655]
2: In matrix(x$commit_commit_total, ncol = 7) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [655]
3: In matrix(x$issue_create_total, ncol = 7) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [655]
4: In matrix(x$issue_report_total, ncol = 7) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [655]
5: In matrix(x$event_auth_total, ncol = 7) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [655]
6: In matrix(x$issue_comment_total, ncol = 7) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [655]
7: In matrix(x$message_from_total, ncol = 7) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [655]
> prediction1=kmeans(train,3)
> real=matrix(x$category)
> prediction2=matrix(prediction1$cluster)
> prediction2=prediction2[-c(1,2),]
> prediction2=matrix(prediction2)
> #prediction2=prediction2[,1]+1
> confusionMatrix(real,prediction2)
Confusion Matrix and Statistics

          Reference
Prediction    1    2    3
         1 4311    1   13
         2  110    0    0
         3  148    0    0

Overall Statistics
                                          
               Accuracy : 0.9407          
                 95% CI : (0.9334, 0.9473)
    No Information Rate : 0.9969          
    P-Value [Acc > NIR] : 1               
                                          
                  Kappa : -0.0045         
 Mcnemar's Test P-Value : NA              

Statistics by Class:

                     Class: 1  Class: 2 Class: 3
Sensitivity            0.9435 0.0000000 0.000000
Specificity            0.0000 0.9759930 0.967615
Pos Pred Value         0.9968 0.0000000 0.000000
Neg Pred Value         0.0000 0.9997764 0.997069
Prevalence             0.9969 0.0002182 0.002837
Detection Rate         0.9407 0.0000000 0.000000
Detection Prevalence   0.9437 0.0240017 0.032293
Balanced Accuracy      0.4718 0.4879965 0.483807
> 
> # 2 for 3 attributes
> #x=datatable[datatable[,13]!="1",]
> x=userdatatable[userdatatable[,13]!="1",]
> #train=rbind(matrix(x$commit_auth_total,ncol = 7), matrix(x$commit_commit_total,ncol = 7), matrix(x$issue_create_total,ncol = 7), matrix(x$issue_report_total,ncol = 7), matrix(x$event_auth_total,ncol = 7), matrix(x$issue_comment_total,ncol = 7), matrix(x$message_from_total,ncol = 7))
> train=rbind(matrix(x$issue_create_total,ncol = 3), matrix(x$issue_report_total,ncol = 3),matrix(x$commit_commit_total,ncol = 3))
> prediction1=kmeans(train,2)
> real=matrix(x$category)
> prediction2=matrix(prediction1$cluster)
> #prediction2=prediction2[-c(1,1),]
> prediction2=matrix(prediction2)
> prediction2=prediction2[,1]+1
> confusionMatrix(real,prediction2)
Confusion Matrix and Statistics

          Reference
Prediction   2   3
         2   1 109
         3   0 148
                                          
               Accuracy : 0.5775          
                 95% CI : (0.5147, 0.6385)
    No Information Rate : 0.9961          
    P-Value [Acc > NIR] : 1               
                                          
                  Kappa : 0.0104          
 Mcnemar's Test P-Value : <2e-16          
                                          
            Sensitivity : 1.000000        
            Specificity : 0.575875        
         Pos Pred Value : 0.009091        
         Neg Pred Value : 1.000000        
             Prevalence : 0.003876        
         Detection Rate : 0.003876        
   Detection Prevalence : 0.426357        
      Balanced Accuracy : 0.787938        
                                          
       'Positive' Class : 2               
                                          
> 
> 
> # 2 for 7 attributes
> #x=datatable[datatable[,13]!="1",]
> x=userdatatable[userdatatable[,13]!="1",]
> train=rbind(matrix(x$commit_auth_total,ncol = 7), matrix(x$commit_commit_total,ncol = 7), matrix(x$issue_create_total,ncol = 7), matrix(x$issue_report_total,ncol = 7), matrix(x$event_auth_total,ncol = 7), matrix(x$issue_comment_total,ncol = 7), matrix(x$message_from_total,ncol = 7))
Warning messages:
1: In matrix(x$commit_auth_total, ncol = 7) :
  data length [258] is not a sub-multiple or multiple of the number of rows [37]
2: In matrix(x$commit_commit_total, ncol = 7) :
  data length [258] is not a sub-multiple or multiple of the number of rows [37]
3: In matrix(x$issue_create_total, ncol = 7) :
  data length [258] is not a sub-multiple or multiple of the number of rows [37]
4: In matrix(x$issue_report_total, ncol = 7) :
  data length [258] is not a sub-multiple or multiple of the number of rows [37]
5: In matrix(x$event_auth_total, ncol = 7) :
  data length [258] is not a sub-multiple or multiple of the number of rows [37]
6: In matrix(x$issue_comment_total, ncol = 7) :
  data length [258] is not a sub-multiple or multiple of the number of rows [37]
7: In matrix(x$message_from_total, ncol = 7) :
  data length [258] is not a sub-multiple or multiple of the number of rows [37]
> #train=rbind(matrix(x$issue_create_total,ncol = 3), matrix(x$issue_report_total,ncol = 3),matrix(x$commit_commit_total,ncol = 3))
> prediction1=kmeans(train,2)
> real=matrix(x$category)
> prediction2=matrix(prediction1$cluster)
> prediction2=prediction2[-c(1,1),]
> prediction2=matrix(prediction2)
> prediction2=prediction2[,1]+1
> confusionMatrix(real,prediction2)
Confusion Matrix and Statistics

          Reference
Prediction   2   3
         2 109   1
         3 146   2
                                         
               Accuracy : 0.4302         
                 95% CI : (0.369, 0.4931)
    No Information Rate : 0.9884         
    P-Value [Acc > NIR] : 1              
                                         
                  Kappa : 0.0038         
 Mcnemar's Test P-Value : <2e-16         
                                         
            Sensitivity : 0.42745        
            Specificity : 0.66667        
         Pos Pred Value : 0.99091        
         Neg Pred Value : 0.01351        
             Prevalence : 0.98837        
         Detection Rate : 0.42248        
   Detection Prevalence : 0.42636        
      Balanced Accuracy : 0.54706        
                                         
       'Positive' Class : 2              
                                         
> 
> 
> ##############
> # 2. ctree
> x=userdatatable
> y = x[sample(nrow(x)),]
> #y=rbind(matrix(x$commit_auth_total,ncol = 7), matrix(x$commit_commit_total,ncol = 7), matrix(x$issue_create_total,ncol = 7), matrix(x$issue_report_total,ncol = 7), matrix(x$event_auth_total,ncol = 7), matrix(x$issue_comment_total,ncol = 7), matrix(x$message_from_total,ncol = 7))
> y=rbind(matrix(x$commit_auth_total,ncol = 8), matrix(x$commit_commit_total,ncol = 8), matrix(x$issue_create_total,ncol = 8), matrix(x$issue_report_total,ncol = 8), matrix(x$event_auth_total,ncol = 8), matrix(x$issue_comment_total,ncol = 8), matrix(x$message_from_total,ncol = 8),matrix(x$category,ncol = 8))
Warning messages:
1: In matrix(x$commit_auth_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
2: In matrix(x$commit_commit_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
3: In matrix(x$issue_create_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
4: In matrix(x$issue_report_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
5: In matrix(x$event_auth_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
6: In matrix(x$issue_comment_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
7: In matrix(x$message_from_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
8: In matrix(x$category, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
> #train=rbind(matrix(x$commit_auth_total,ncol = 7), matrix(x$commit_commit_total,ncol = 7), matrix(x$issue_create_total,ncol = 7), matrix(x$issue_report_total,ncol = 7), matrix(x$event_auth_total,ncol = 7), matrix(x$issue_comment_total,ncol = 7), matrix(x$message_from_total,ncol = 7))
> y=x
> y[,1]       <- NULL
> y[,9]       <- NULL
> y[,9]       <- NULL
> y[,9]       <- NULL
> y$category <- as.factor(y$category)
> y = y[sample(nrow(y)),]
> train=y[1:3000,]
> test=y[3000:4583,]
> model_ctree <- ctree(category ~ .,data = train)
> pred_ctree=predict(model_ctree, test)
> confusionMatrix(test$category,pred_ctree)
Confusion Matrix and Statistics

          Reference
Prediction    1    2    3
         1 1491    0    0
         2   43    0    0
         3   50    0    0

Overall Statistics
                                          
               Accuracy : 0.9413          
                 95% CI : (0.9286, 0.9524)
    No Information Rate : 1               
    P-Value [Acc > NIR] : 1               
                                          
                  Kappa : 0               
 Mcnemar's Test P-Value : NA              

Statistics by Class:

                     Class: 1 Class: 2 Class: 3
Sensitivity            0.9413       NA       NA
Specificity                NA  0.97285  0.96843
Pos Pred Value             NA       NA       NA
Neg Pred Value             NA       NA       NA
Prevalence             1.0000  0.00000  0.00000
Detection Rate         0.9413  0.00000  0.00000
Detection Prevalence   0.9413  0.02715  0.03157
Balanced Accuracy          NA       NA       NA
> 
> ##############
> # 3.naiveBayes
> x=userdatatable
> y = x[sample(nrow(x)),]
> #y=rbind(matrix(x$commit_auth_total,ncol = 7), matrix(x$commit_commit_total,ncol = 7), matrix(x$issue_create_total,ncol = 7), matrix(x$issue_report_total,ncol = 7), matrix(x$event_auth_total,ncol = 7), matrix(x$issue_comment_total,ncol = 7), matrix(x$message_from_total,ncol = 7))
> y=rbind(matrix(x$commit_auth_total,ncol = 8), matrix(x$commit_commit_total,ncol = 8), matrix(x$issue_create_total,ncol = 8), matrix(x$issue_report_total,ncol = 8), matrix(x$event_auth_total,ncol = 8), matrix(x$issue_comment_total,ncol = 8), matrix(x$message_from_total,ncol = 8),matrix(x$category,ncol = 8))
Warning messages:
1: In matrix(x$commit_auth_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
2: In matrix(x$commit_commit_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
3: In matrix(x$issue_create_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
4: In matrix(x$issue_report_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
5: In matrix(x$event_auth_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
6: In matrix(x$issue_comment_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
7: In matrix(x$message_from_total, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
8: In matrix(x$category, ncol = 8) :
  data length [4583] is not a sub-multiple or multiple of the number of rows [573]
> #train=rbind(matrix(x$commit_auth_total,ncol = 7), matrix(x$commit_commit_total,ncol = 7), matrix(x$issue_create_total,ncol = 7), matrix(x$issue_report_total,ncol = 7), matrix(x$event_auth_total,ncol = 7), matrix(x$issue_comment_total,ncol = 7), matrix(x$message_from_total,ncol = 7))
> y=x
> y[,1]       <- NULL
> y[,9]       <- NULL
> y[,9]       <- NULL
> y[,9]       <- NULL
> y$category <- as.factor(y$category)
> y = y[sample(nrow(y)),]
> train=y[1:3000,]
> test=y[3000:4583,]
> model_naiveBayes=naiveBayes(category ~ ., data = train)
> pred_naiveBayes=predict(model_naiveBayes, test)
> #table(pred_naiveBayes, test$Species)
> confusionMatrix(pred_naiveBayes,test$category)
Confusion Matrix and Statistics

          Reference
Prediction    1    2    3
         1  210    1    0
         2 1285   35   50
         3    3    0    0

Overall Statistics
                                          
               Accuracy : 0.1547          
                 95% CI : (0.1372, 0.1734)
    No Information Rate : 0.9457          
    P-Value [Acc > NIR] : 1               
                                          
                  Kappa : 0.0105          
 Mcnemar's Test P-Value : <2e-16          

Statistics by Class:

                     Class: 1 Class: 2 Class: 3
Sensitivity           0.14019  0.97222 0.000000
Specificity           0.98837  0.13760 0.998044
Pos Pred Value        0.99526  0.02555 0.000000
Neg Pred Value        0.06191  0.99533 0.968374
Prevalence            0.94571  0.02273 0.031566
Detection Rate        0.13258  0.02210 0.000000
Detection Prevalence  0.13321  0.86490 0.001894
Balanced Accuracy     0.56428  0.55491 0.499022
> 
> 
> 
> proc.time()
   user  system elapsed 
116.124   2.684 223.552 
